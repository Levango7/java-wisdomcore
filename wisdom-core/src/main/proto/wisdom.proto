syntax = "proto3";
option java_package = "org.wisdom.p2p";

import "google/protobuf/timestamp.proto";

service Wisdom {
    rpc Entry (Message) returns (Message) {
    }
}

enum Code {
    NOTHING = 0;
    PING = 1;
    PONG = 2;
    LOOK_UP = 3;
    PEERS = 4;
    GET_STATUS = 5;
    STATUS = 6;
    GET_BLOCKS = 7;
    BLOCKS = 8;

    // 以下需要中继支持
    PROPOSAL = 9;
    TRANSACTION = 10;
}

enum ClipDirection {
    CLIP_TAIL = 0;
    CLIP_INITIAL = 1;
}


message Message {
    // wisdom 协议头
    Code code = 1;
    google.protobuf.Timestamp created_at = 2;
    string remote_peer = 3;
    string recipient = 4;
    uint64 ttl = 5; // avoid flood attack
    uint64 nonce = 6; // avoid collision
    bytes signature = 7;

    // wisdom 消息体
    bytes body = 8;

}

message Ping {
}

message Pong {
}

message Lookup {

}

// 验证者节点会定时把自己节点信息加在 validators 里面广播出去
message Peers {
    repeated string peers = 1;
}

message GetStatus {

}

message Status {
    uint64 current_height = 1;
    bytes best_block_hash = 2;
    bytes genesis_hash = 3;
}

message GetBlocks {
    uint64 start_height = 1;
    uint64 stop_height = 2;
    ClipDirection clip_direction = 3;
}

message Blocks {
    repeated Block blocks = 1;
}

message Proposal {
    Block block = 1;
}

message Nothing {
}

enum TransactionType {
    COIN_BASE = 0;
    TRANSFER = 1;
}

message Transaction {
    uint64 amount = 1;
    google.protobuf.Timestamp created_at = 2;
    bytes data = 3;
    bytes from = 4;
    uint64 gasPrice = 5;
    uint64 nonce = 6;
    string to = 7;
    TransactionType type = 8;
    uint32 Version = 9;
    bytes signature = 10;
}

message Block {
    google.protobuf.Timestamp created_at = 1;
    uint64 height = 2;
    bytes merkle_root = 3;
    bytes nonce = 4;
    bytes parent_hash = 5;
    bytes target = 6;
    uint32 version = 7;
    repeated Transaction body = 8;
}
