package org.wisdom.keystore.util;

public class PrincipalUtil {
    // ==============================Fields===========================================
    /** Start time cut-off (2015-01-01) */
    private final long twepoch = 1420041600000L;

    /** The number of bits of machine id */
    private final long workerIdBits = 5L;

    /** The number of digits occupied by the data id */
    private final long datacenterIdBits = 5L;

    /** The maximum machine id supported, which is 31 (this shift algorithm can quickly calculate the maximum decimal number represented by several binary digits) */
    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);

    /** The maximum supported data id, which is 31 */
    private final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);

    /** The number of bits of a sequence in an id */
    private final long sequenceBits = 12L;

    /** The machine ID moves 12 bits to the left */
    private final long workerIdShift = sequenceBits;

    /** Data id moves 17 bits to the left (12+5) */
    private final long datacenterIdShift = sequenceBits + workerIdBits;

    /** The intercept is 22 to the left(5+5+12) */
    private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;

    /** Generate the mask for the sequence, which is 4095 (0b111111111111=0xfff=4095) */
    private final long sequenceMask = -1L ^ (-1L << sequenceBits);

    /** Working machine ID(0~31) */
    private long workerId;

    /** Data center ID(0~31) */
    private long datacenterId;

    /** Millisecond sequence (0~4095) */
    private long sequence = 0L;

    /** The last time the ID was generated */
    private long lastTimestamp = -1L;

    //==============================Constructors=====================================
    /**
     * The constructor
     * @param workerId work ID (0~31)
     * @param datacenterId datacenterId (0~31)
     */
    public PrincipalUtil(long workerId, long datacenterId) {
        if (workerId > maxWorkerId || workerId < 0) {
            throw new IllegalArgumentException(String.format("worker Id can't be greater than %d or less than 0", maxWorkerId));
        }
        if (datacenterId > maxDatacenterId || datacenterId < 0) {
            throw new IllegalArgumentException(String.format("datacenter Id can't be greater than %d or less than 0", maxDatacenterId));
        }
        this.workerId = workerId;
        this.datacenterId = datacenterId;
    }

    // ==============================Methods==========================================
    /**
     * Get the next ID (this method is thread-safe)
     * @return SnowflakeId
     */
    public synchronized Long nextId() {
        long timestamp = timeGen();

        //If the current time is less than the timestamp generated by the last ID, an exception should be thrown when the system clock has gone back
        if (timestamp < lastTimestamp) {
            throw new RuntimeException(
                    String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
        }

        //If it is generated at the same time, the millisecond sequence is performed
        if (lastTimestamp == timestamp) {
            sequence = (sequence + 1) & sequenceMask;
            //Sequence overflow in milliseconds
            if (sequence == 0) {
                //Block to the next millisecond for a new timestamp
                timestamp = tilNextMillis(lastTimestamp);
            }
        }
        //The timestamp changes and the sequence is reset in milliseconds
        else {
            sequence = 0L;
        }

        //The last time the ID was generated
        lastTimestamp = timestamp;

        //The shift and or operations are combined to form a 64-bit ID
        return ((timestamp - twepoch) << timestampLeftShift) //
                | (datacenterId << datacenterIdShift) //
                | (workerId << workerIdShift) //
                | sequence;
    }

    /**
     * Block to the next millisecond until a new timestamp is obtained
     * @param lastTimestamp the last time the ID was generated
     * @return current timestamp
     */
    protected long tilNextMillis(long lastTimestamp) {
        long timestamp = timeGen();
        while (timestamp <= lastTimestamp) {
            timestamp = timeGen();
        }
        return timestamp;
    }

    /**
     Returns the current time in milliseconds
     * @return current time (milliseconds)
     */
    protected long timeGen() {
        return System.currentTimeMillis();
    }

    /*    //==============================Test=============================================
     *//** test *//*
    public static void main(String[] args) {
        PrincipalUtil idWorker = new PrincipalUtil(0, 0);
        long l1 = System.currentTimeMillis();
        HashSet hashSet = new HashSet();
        Object[] arr = new Object[10000];
        for (int i = 0; i < 10000; i++) {
            //hashSet.add(idWorker.nextId());
            arr[i] = idWorker.nextId();
        }
        long l2 = System.currentTimeMillis();
        System.out.println(l2-l1);
        for (Object o : arr) {
            hashSet.add(o);
        }
        System.out.println(hashSet.size());
    }
    public String getStrID(){
        return String.valueOf(nextId());
    }*/
    public PrincipalUtil() {
    }
}
